#include "OneButton.h"                 //library for one button interrupt.h
#include<EEPROM.h>                     //include the eeprom libabry
#include <ESP8266WiFi.h>          //https://github.com/esp8266/Arduino
#include <DNSServer.h>
#include <ESP8266WebServer.h>
#include <WiFiManager.h>          //https://github.com/tzapu/WiFiManager
#include <FS.h> 
#include <ArduinoJson.h>          //https://github.com/bblanchon/ArduinoJson
#include <PubSubClient.h>
#include <PubSubClientTools.h>
#include <Thread.h>             // https://github.com/ivanseidel/ArduinoThread
#include <ThreadController.h>
#include <Ticker.h>

#define WIFI_SSID "Aditya_wifi1"
#define WIFI_PASS "sravyasravya"
char* MQTT_SERVER = "65.0.109.93";

WiFiClient espClient;
PubSubClient client(MQTT_SERVER, 1883, espClient);
PubSubClientTools mqtt(client);

ThreadController threadControl = ThreadController();
Thread thread = Thread();

Ticker ticker;
IPAddress server(65, 0, 109, 93);
#define PIN_INPUT 5                    //connect the pushbutton on pin number D1 or GPIO 4
#define MAXUVTIME 5                 // UV Life cycle for 600000
/*Declare the global variable here*/
const byte Fan = 4;                    //GPIO 4 (D2/SDA) of Node MCU ESP8266 is assigned to BLDC 12V Fan of AEREM 100 named as "Fan"
const byte Blue_LED = 14;              //GPIO 12(D6/HMISO) of Node MCU ESP8266 is assigned to Blue LED's of AEREM 100 named as "Blue_LED"
const byte Red_LED = 12 ;              //GPIO 14(D5/HSCLK) of Node MCU ESP8266 is assigned to Red LED's of AEREM 100 named as "Red_LED"               
float Cumulative_UV_Ontime = 0;        //take a varibale to store the both the uv time
unsigned long startTime = 0;           //start the millis in long press
float uv_timeS1 = 0;                   //variable to store the time in eeprom in single click
unsigned long uv_timeS = 0;            //take a varibale to store the millis time
int singleclick = 0;                    //take a variable to check weather it is on of off
int doubleclick = 0;                    //take a variable to check weather the time is store in eeprom or not
bool wifi_mqtt_enabled = 0;
OneButton button(PIN_INPUT, true);
/*MQTT setting*/
char mqtt_server[40] = "13.126.15.40";
char mqtt_port[6] = "1883";

//flag for saving data
bool shouldSaveConfig = false;

//callback notifying us of the need to save config
void saveConfigCallback () {
  Serial.println("Should save config");
  shouldSaveConfig = true;
}


void wifi_manager_setup(void);
void wifi_mqtt_setup(void);
void clear_eeprom(void);
void uv_lamp_op(void);
void ion_on_off(void);


void tick()
{
  //toggle state
  int state = digitalRead(BUILTIN_LED);  // get the current state of GPIO1 pin
  digitalWrite(BUILTIN_LED, !state);     // set pin to the opposite state
}

//gets called when WiFiManager enters configuration mode
void configModeCallback (WiFiManager *myWiFiManager) {
  Serial.println("Entered config mode");
  Serial.println(WiFi.softAPIP());
  //if you used auto generated SSID, print it
  Serial.println(myWiFiManager->getConfigPortalSSID());
  //entered config mode, make led toggle faster
  ticker.attach(0.2, tick);
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
    if((char)payload[i] == '1')
    {
      ion_on_off();
    }
    //LED
    else if((char)payload[i] == '2')
    {
      uv_lamp_op();
    }
    
  }
  Serial.println();
}




unsigned long pressStartTime;          //take a variable to stor the millis value
ICACHE_RAM_ATTR void checkTicks()      //attach the ram attribute
{
  button.tick();                       //check the button ticks
}


void singleClick()
{
  ion_on_off();
}

void ion_on_off(void)
{
  if(doubleclick == 1)                                    //if doubleclick is equal to one then store the uv lamp time in eeprom
  {
  unsigned long endTimeS = millis();                      //start the millis
  unsigned long uv_timeS = (endTimeS - startTime);
  uv_timeS1 = (uv_timeS/1000) / 60;                    //convert the millis in minute
  Serial.print("uv_time_in_minuteS = ");
  Serial.println(uv_timeS1);                              //print the uv_time3 and see for how much time our is on at high high speed

  EEPROM.put(0, uv_timeS1);                                 //sotre the minute in eeprom
  if (EEPROM.commit()){                                     //check weather the data is save in eeprom or not
    Serial.println("EEPROM Successfully Committed");}       
  else{
    Serial.println("ERROR! EEPROM commit failed");}
    doubleclick = 0;
  }
  if(singleclick == 0)
  {
  Serial.println("Ioniser turn on");
  digitalWrite(Blue_LED, LOW);                      //turn on the blue led
  digitalWrite(Red_LED, HIGH);                      //turn off the red led
  analogWrite(Fan, 300);
  singleclick = 1;
  }
  else{
  Serial.println("ioniser turn off");
  digitalWrite(Blue_LED, HIGH);                     //turn off the blue led
  digitalWrite(Red_LED, HIGH);                      //turn off the red led
  analogWrite(Fan, LOW);                            //turn off the fan
  singleclick = 0;
  }  
}
void doubleClick()
{
    uv_lamp_op();                                   
}

void uv_lamp_op(void)
{
  unsigned int long uv_timeD = EEPROM.get(0, uv_timeS1);                //read the eeprom
  Serial.print("Previous cycle uv_timeD = ");
  Serial.println(uv_timeD);                                // print the eeprom value

  Cumulative_UV_Ontime = (Cumulative_UV_Ontime + uv_timeD);   //store the previous and current value of eeprom
  Serial.print("Cumulative_UV_Ontime = ");
  Serial.println(Cumulative_UV_Ontime);                       //print the how uch values are store in eeprom

  startTime = millis();                                       //start the millis
  Serial.println("doubleClick() detected.");
  digitalWrite(Blue_LED, HIGH);                               //turn off the blue led
  digitalWrite(Red_LED, LOW);                                 //turn on the red led
  analogWrite(Fan, 1023);                                     // fan at high speed
  doubleclick = 1;  
  singleclick = 1;
}

void multiClick()
{
  unsigned int buttonclicks;
  Serial.print("multiClick(");
  buttonclicks = button.getNumberClicks();
  Serial.print(button.getNumberClicks());
  Serial.println(") detected.");
  if(buttonclicks >5)
  {
    WiFiManager wifiManager;
    wifiManager.resetSettings();
    Serial.println("Reset wifi");
   }
  
} // multiClick


// this function will be called when the button was pressed 2 times in a short timeframe.
void pressStart()
{
  Serial.println("pressStart()");
  pressStartTime = millis() - 1000; // as set in setPressTicks()
} // pressStart()


// this function will be called when the button was pressed 2 times in a short timeframe.
unsigned long diff_time;
void pressStop()
{
  unsigned long diff_time;
  Serial.print("pressStop(");
  diff_time = millis() - pressStartTime;
  Serial.print(diff_time);
  Serial.println(") detected.");
  if((diff_time> 5000) && (diff_time<10000)) //Long press
  clear_eeprom();
  if(diff_time> 10000)  //Long long press
  wifi_manager_setup();
} // pressStop()


void setup()
{
  Serial.begin(115200);                                //initialize the baudrate
  pinMode(BUILTIN_LED, OUTPUT);
  pinMode(Blue_LED, OUTPUT);                          // sets the blue led as output
  pinMode(Red_LED, OUTPUT);                           //set the red led as output
  pinMode(Fan, OUTPUT);                               //set the fan as the output
  digitalWrite(Blue_LED, HIGH);                       //turn off the blue led
  digitalWrite(Red_LED, HIGH);                        //turn off the red led                  
  digitalWrite(BUILTIN_LED, HIGH);
  analogWrite(Fan, LOW);                               //turn of the fan
  EEPROM.begin(512);                                  //start the eeprom
  
  attachInterrupt(digitalPinToInterrupt(PIN_INPUT), checkTicks, CHANGE);     //attach trhe interrupt on pin D1
  button.attachClick(singleClick);                                        //call the singleclick fn
  button.attachDoubleClick(doubleClick);                                  //call the double click fn
  button.attachMultiClick(multiClick);                                  // future use
  button.setPressTicks(1000);
  button.attachLongPressStart(pressStart);
  button.attachLongPressStop(pressStop);//call the stop press fn
}


void wifi_manager_setup(void)
{
  ticker.attach(0.6, tick);
  //WiFiManager
  //Local intialization. Once its business is done, there is no need to keep it around
  WiFiManager wifiManager;
  //reset settings - for testing
  //wifiManager.resetSettings();

  //set callback that gets called when connecting to previous WiFi fails, and enters Access Point mode
  wifiManager.setAPCallback(configModeCallback);

  //fetches ssid and pass and tries to connect
  //if it does not connect it starts an access point with the specified name
  //here  "AutoConnectAP"
  //and goes into a blocking loop awaiting configuration
  if (!wifiManager.autoConnect("AEREM100","12345678")) {
    Serial.println("failed to connect and hit timeout");
    //reset and try again, or maybe put it to deep sleep
    ESP.reset();
    delay(1000);
  }
  ticker.detach();
  digitalWrite(BUILTIN_LED, HIGH);
  wifi_mqtt_enabled =1;
  mqtt_connection();
}

void clear_eeprom(void)
{
  unsigned int long uv_timeD = EEPROM.get(0, uv_timeS1);
  if(uv_timeD > MAXUVTIME)
  {
  for (int i = 0 ; i < EEPROM.length() ; i++)
    {
      EEPROM.write(i, 0);                                     //reset the eeprom memory
    }
    Serial.println("Eeprom Reset");
    Cumulative_UV_Ontime = 0; 
  }
  else
  {
   Serial.print("Time left = ");
   Serial.println(uv_timeD); 
  }
}



void loop()
{
  button.tick();
  client.loop();
  threadControl.run();
  delay(10);
}

void setup_wifi() {
  delay(100);
  // We start by connecting to a WiFi network
  Serial.print("Connecting to ");
 // Serial.println(ssid);
  WiFi.begin("Aditya_wifi1", "sravyasravya");
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  randomSeed(micros());
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void mqtt_connection(void)
{
  // Connect to MQTT
  
  Serial.print("Connecting to MQTT ");
  if (client.connect("ESP8266Client")) {
    Serial.println("CONNECTED");
    mqtt.subscribe("recieve",  topic1_subscriber);
  } else {
    Serial.println("failed, rc="+client.state());
  }

  // Enable Thread
  thread.onRun(publisher);
  thread.setInterval(2000);
  threadControl.add(&thread);
}

void publisher() {
  mqtt.publish("send", "Hello World!");
}

void topic1_subscriber(String topic, String message) {
  Serial.println("Message arrived in function 1 ["+topic+"] "+message);
}
